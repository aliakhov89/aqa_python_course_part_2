#Вам дается последовательность целых чисел и вам нужно ее обработать и вывести на экран сумму первой пятерки чисел
# из этой последовательности, затем сумму второй пятерки, и т. д.

#Но последовательность не дается вам сразу целиком. С течением времени к вам поступают её последовательные части.
# Например, сначала первые три элемента, потом следующие шесть, потом следующие два и т. д.

#Реализуйте класс Buffer, который будет накапливать в себе элементы последовательности и выводить сумму пятерок последовательных элементов по мере их накопления.

#Одним из требований к классу является то, что он не должен хранить в себе больше элементов, чем ему действительно необходимо,
# т. е. он не должен хранить элементы, которые уже вошли в пятерку, для которой была выведена сумма.

#Класс должен иметь следующий вид
#class Buffer:
#    def __init__(self):
#        # конструктор без аргументов

#    def add(self, *a):
#        # добавить следующую часть последовательности

#    def get_current_part(self):
#        # вернуть сохраненные в текущий момент элементы последовательности в порядке, в котором они были
#        # добавлены


#Пример работы с классом

#buf = Buffer()
#buf.add(1, 2, 3)
#buf.get_current_part() # вернуть [1, 2, 3]
#buf.add(4, 5, 6) # print(15) – вывод суммы первой пятерки элементов
#buf.get_current_part() # вернуть [6]
#buf.add(7, 8, 9, 10) # print(40) – вывод суммы второй пятерки элементов
#buf.get_current_part() # вернуть []
#buf.add(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1) # print(5), print(5) – вывод сумм третьей и четвертой пятерки
#buf.get_current_part() # вернуть [1]

#Обратите внимание, что во время выполнения метода add выводить сумму пятерок может потребоваться несколько раз до тех пор,
# пока в буфере не останется менее пяти элементов.


class Buffer:
    def __init__(self):
        # Initialize an empty list to store elements
        self.buffer = []

    def add(self, *a): # Add new elements to the buffer
        self.buffer.extend(a)

        # While there are at least 5 elements in the buffer
        while len(self.buffer) >= 5:  # Take the first 5 elements, calculate their sum, and print it
            current_part = self.buffer[:5]
            print(sum(current_part))

            self.buffer = self.buffer[5:] # Remove these 5 elements from the buffer

    def get_current_part(self): # Return the remaining elements in the buffer
        return self.buffer
